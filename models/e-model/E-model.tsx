/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t e-model.glb 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    robot: THREE.Mesh
  }
  materials: {
    ['Material.004']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/e-model.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <pointLight intensity={2543.646} decay={2} position={[2.449, 2.919, 3.836]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={2543.646} decay={2} position={[-2.492, 2.919, 3.836]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={260.887} decay={2} color="#ff0011" position={[2.505, 6.026, -3.262]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={260.887} decay={2} color="#ff0011" position={[-2.49, 6.026, -3.262]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={260.887} decay={2} color="#ff0011" position={[0, 6.026, -3.844]} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.robot.geometry} material={materials['Material.004']} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}

useGLTF.preload('/e-model.glb')
