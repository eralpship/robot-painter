/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t e-model.glb 
*/

import * as THREE from 'three'
import { useGLTF } from '@react-three/drei'
import { type GLTF } from 'three-stdlib'

// type GLTFResult = GLTF & {
//   nodes: {
//     robot: THREE.Mesh
//   }
//   materials: {
//     ['Material.004']: THREE.MeshStandardMaterial
//   }
// }


// export function Model(props: React.ComponentProps<'group'>) {
//   const { nodes, materials } = useGLTF('/e-model.glb') as unknown as GLTFResult
  
//   // Modify material properties for reflection/refraction
//   materials['Material.004'].metalness = 0.2
//   materials['Material.004'].roughness = 0.6
//   materials['Material.004'].envMapIntensity = 0.3
  
//   return (
//     <group {...props} dispose={null}>
//       <pointLight intensity={8} decay={2} position={[2.449, 2.919, 3.836]} rotation={[-Math.PI / 2, 0, 0]} />
//       <pointLight intensity={8} decay={2} position={[-2.492, 2.919, 3.836]} rotation={[-Math.PI / 2, 0, 0]} />
//       <pointLight intensity={4} decay={2} color="#ff0000" position={[2.505, 6.026, -3.262]} rotation={[-Math.PI / 2, 0, 0]} />
//       <pointLight intensity={4} decay={2} color="#ff0000" position={[-2.49, 6.026, -3.262]} rotation={[-Math.PI / 2, 0, 0]} />
//       <pointLight intensity={4} decay={2} color="#ff0000" position={[0, 6.026, -3.844]} rotation={[-Math.PI / 2, 0, 0]} />
//       <mesh geometry={nodes.robot.geometry} material={materials['Material.004']} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
//     </group>
//   )
// }

// useGLTF.preload('/e-model.glb')



// new e-model

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t e-model.glb 
*/

type GLTFResult = GLTF & {
  nodes: {
    robot: THREE.Mesh
    wheel_back_left: THREE.Mesh
    wheel_front_left: THREE.Mesh
    wheel_middle_left: THREE.Mesh
    wheel_back_right: THREE.Mesh
    wheel_front_right: THREE.Mesh
    wheel_middle_right: THREE.Mesh
  }
  materials: {
    body: THREE.MeshStandardMaterial
    wheel: THREE.MeshPhysicalMaterial
  }
}

export function Model(props: React.ComponentProps<'group'>) {
  const { nodes, materials } = useGLTF('/e-model.glb') as unknown as GLTFResult

  // Body material - metallic and reflective
  materials.body.metalness = 0.3
  materials.body.roughness = 0.35
  materials.body.envMapIntensity = 1.5

  // Wheel material - rubber-like
  materials.wheel.metalness = 0.0
  materials.wheel.roughness = 0.9
  materials.wheel.envMapIntensity = 0.6
  materials.wheel.clearcoat = 0.3
  materials.wheel.clearcoatRoughness = 0.7
  
  return (
    <group {...props} dispose={null}>
      {/* Headlights (white/yellow) */}
      <pointLight intensity={6} decay={2} color="#ffe8a0" position={[2.449, 2.919, 3.836]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={6} decay={2} color="#ffe8a0" position={[-2.492, 2.919, 3.836]} rotation={[-Math.PI / 2, 0, 0]} />
      
      {/* Red lights */}
      <pointLight intensity={3} decay={2} color="#ff0000" position={[2.505, 6.026, -3.262]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={3} decay={2} color="#ff0000" position={[-2.49, 6.026, -3.262]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={3} decay={2} color="#ff0000" position={[0, 6.026, -3.844]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={3} decay={2} color="#ff0000" position={[0.382, 6.026, -3.844]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={3} decay={2} color="#ff0000" position={[-0.478, 6.026, -3.844]} rotation={[-Math.PI / 2, 0, 0]} />
      
      {/* Meshes */}
      <mesh geometry={nodes.robot.geometry} material={materials.body} rotation={[Math.PI / 2, 0, 0]} scale={0.01} castShadow receiveShadow />
      <mesh geometry={nodes.wheel_back_left.geometry} material={materials.wheel} position={[-3.224, 1.397, -2.321]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} castShadow receiveShadow />
      <mesh geometry={nodes.wheel_front_left.geometry} material={materials.wheel} position={[-3.224, 1.397, 3.484]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} castShadow receiveShadow />
      <mesh geometry={nodes.wheel_middle_left.geometry} material={materials.wheel} position={[-3.224, 1.397, 0.503]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} castShadow receiveShadow />
      <mesh geometry={nodes.wheel_back_right.geometry} material={materials.wheel} position={[3.223, 1.397, -2.321]} rotation={[-Math.PI / 2, 0, Math.PI]} scale={0.01} castShadow receiveShadow />
      <mesh geometry={nodes.wheel_front_right.geometry} material={materials.wheel} position={[3.223, 1.397, 3.484]} rotation={[-Math.PI / 2, 0, Math.PI]} scale={0.01} castShadow receiveShadow />
      <mesh geometry={nodes.wheel_middle_right.geometry} material={materials.wheel} position={[3.223, 1.397, 0.503]} rotation={[-Math.PI / 2, 0, Math.PI]} scale={0.01} castShadow receiveShadow />
    </group>
  )
}

useGLTF.preload('/e-model.glb')
